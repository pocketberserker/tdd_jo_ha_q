package xutp

import spock.lang.*
import xutp.KeyValueStore

class KeyValueStoreSpec extends Specification {

    def "空のKVSにkeyとvalueのペアをputするとkeyに対応するvalueがgetできる" () {

        given:
        def kvs = new KeyValueStore()

        when:
        kvs.put(key,value)

        then:
        kvs.get(key) == value

        where:
        key   | value
        'aaa' | 'bbb'
-       'ccc' | 'ddd'
+       1     | 2.5
    }

    def "KVSにnullのkeyをputすると例外が発生する" () {

        given:
        def kvs = new KeyValueStore()

        when:
        kvs.put(null,'null')

        then:
        thrown(IllegalArgumentException)
    }

    def "KVSに対してnullでgetを行うと例外が発生する" () {

        given:
        def kvs = new KeyValueStore()
        kvs.put('aaa','bbb')

        when:
        kvs.get(null)

        then:
        thrown(IllegalArgumentException)
    }

    def "KVSに登録されていないkeyでgetを行うとnullが返る" () {

        given:
        def kvs = new KeyValueStore()

        when:
        kvs.put('aaa','bbb')

        then:
        kvs.get('other') == null
    }

    def "既にKVSに存在するkeyをputするとvalueのみ更新される" () {

        given:
        def kvs = new KeyValueStore()
        kvs.put('aaa','bbb')

        when:
        kvs.put('aaa','ccc')

        then:
        kvs.get('aaa') == 'ccc'
    }

    def "既にKVSに存在するkeyについてdeleteを行うとkeyとvalueのペアがKVSから削除される" () {

        given:
        def kvs = new KeyValueStore()
        kvs.put(key,value)

        when:
        kvs.delete(key)

        then:
        kvs.get(key) == null
 
        where:
        key   | value
        'aaa' | 'bbb'
-       'ccc' | 'ddd'
+       1     | 2.5
    }

    def "KVSに登録されているkey-valueを文字列で取得できる" () {

        given:
        def kvs = new KeyValueStore()

        when:
        kvs.put('aaa','bbb')
        kvs.put('ccc','ddd')

        then:
        kvs.dump() == '{aaa:bbb}{ccc:ddd}'
    }

    def "KVSに複数のkeyvalueペアを一度に登録できる" () {

        given:
        def kvs = new KeyValueStore()

        when:
        kvs.put([('aaa'):('bbb'),('ccc'):('ddd')])
        kvs.put([(key1):(value1),(key2):(value2)])

        then:
-       kvs.get('aaa') == 'bbb'
+       kvs.get(key1) == value1
-       kvs.get('ccc') == 'ddd'
+       kvs.get(key2) == value2

+       where:
+       key1  | value1 | key2  | value2 
+       'aaa' | 'bbb'  | 'ccc' | 'ddd'
+       1     | 2.5    | 10    | 30.0
    }

    def "複数keyvalueペアのkeyに一つでもnullが含まれていたらKVSを更新せず例外を発生させる" () {
 
        given:
        def kvs = new KeyValueStore()
 
        when:
        kvs.put(['aaa':'bbb',(null):'ddd'])
 
        then:
        thrown(IllegalArgumentException)
        kvs.dump() == ''
    }
}